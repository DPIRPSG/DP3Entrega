DP3Entrega: JPQL

1)	Query C/1
	12.7.1 Display a dashboard with the following information: The consumer/s who has/have placed more orders.
	Query: select c from Consumer c join c.orders o group by c having count(c.orders.size) = (select max(c.orders.size) from Consumer c);
	Descripci√≥n textual: ‚Äî
	Resultado: -
	Anotaciones: Query acabada y testada. No vamos a tener en cuenta que se hayan cancelado las orders. Nos preguntan por las placed por lo que tomamos el placementMoment como filtro.

2)	Query C/2
	12.7.2 Display a dashboard with the following information: The consumer/s who has/have spent more money on their orders.
	Query: select c from Consumer c join c.orders o where o.cancelMoment is null group by c having max(o.amount) = (select max(o.amount) from Order o);
	Descripci√≥n textual: -
	Resultado: -
	Anotaciones: Query acabada. No hay orders con m√°s de un orderItem. Sobre lo de que ‚ÄúHay que crear un OrderItem y a√±adirlo a un order ya creado para que haya un Order con varios OrderItem.‚Äù, ya no hace falta porque el amount funciona por debajo d√°ndonos todo lo que necesitamos.

3)	Query C/3
	12.7.3 Display a dashboard with the following information: The best-selling item/s in the inventory.
	Query: select i from Item i where i.deleted is false and i.sku IN (select oi.sku from OrderItem oi join oi.order o where o.deliveryMoment is not null group by oi.sku having max(oi.units) = (select max(oi.units) from OrderItem oi));
	Descripci√≥n textual: -
	Resultado: -
	Anotaciones: Query acabada y testada. Si la query de ayuda (la misma que hay detr√°s del = en la query a entregar) devuelve varios objetos petaba, pero si en vez de poner objeto.atributo = select ponemos objeto.atributo IN select funciona a la perfecci√≥n. Dadle las gracias a este post (http://www.antoniopol.com/blog/como-solucionar-el-error-subquery-returns-more-than-1-row-en-mysql/). 

4)	Query C/4
	12.7.4 Display a dashboard with the following information:Ùè∞Ä The worst-selling item/s in the inventory.
	Query: select i from Item i where i.deleted is false and i.sku IN (select oi.sku from OrderItem oi join oi.order o where o.deliveryMoment is not null group by oi.sku having min(oi.units) = (select min(oi.units) from OrderItem oi));
	Descripci√≥n textual: -
	Resultado: -
	Anotaciones: Query acabada y testada. Si la query de ayuda (la misma que hay detr√°s del = en la query a entregar) devuelve varios objetos petaba, pero si en vez de poner objeto.atributo = select ponemos objeto.atributo IN select funciona a la perfecci√≥n. Dadle las gracias a este post (http://www.antoniopol.com/blog/como-solucionar-el-error-subquery-returns-more-than-1-row-en-mysql/).

5)	Query B/1
	17.6.1 Display a dashboard with the following information: The clerk/s who has/have served and delivered more orders.
	Query: select c from Clerk c join c.orders o where o.deliveryMoment is not null and c.orders.size = (select max(c.orders.size) from Clerk c join c.orders o where o.deliveryMoment is not null) group by c;
	Query 2™ opciÛn(Carlos): select c from Clerk c join c.orders o where o.deliveryMoment is not null group by c having o.size = (select max(o.size) from Clerk c join c.orders o where o.deliveryMoment is not null);
	Query de ayuda: select c.id, count(o) from Clerk c join c.orders o where o.deliveryMoment is not null group by c having count(o) = 1;
	Descripci√≥n textual: -
	Resultado: -
	Anotaciones: En la parte derecha nos devuelve el max de c.orders.size sin un filtro previo de que los deliveryMoment is not null.

6)	Query B/2
	17.6.2 Display a dashboard with the following information: The clerk/s who has/have served and delivered less orders.
	Query: select c from Clerk c join c.orders o where o.deliveryMoment is not null and c.orders.size = (select min(c.orders.size) from Clerk c join c.orders o where o.deliveryMoment is not null) group by c;
	Subquery(Carlos): select count(o) from Clerk c join c.orders o where o.deliveryMoment is not null group by c;
	Query de ayuda: select count(c.orders.size) as x from Clerk c join c.orders o where o.deliveryMoment is not null group by c;
	Descripci√≥n textual: -
	Resultado: -
	Anotaciones: En la parte derecha nos devuelve el min de c.orders.size sin un filtro previo de que los deliveryMoment is not null.

7)	Query B/3
	17.6.3 Display a dashboard with the following information: The consumer/s who has/have cancelled more orders.
	Query: select c1 from Consumer c1, Consumer c2 join c1.orders o1 join c2.orders o2 where o1.cancelMoment is not null and o2.cancelMoment is not null group by c1 having max(o1) >= max(o2);
	Descripci√≥n textual: -
	Resultado: -
	Anotaciones: -

8)	Query B/4
	17.6.4 Display a dashboard with the following information: The consumer/s who has/have cancelled less orders.
	Query: -
	Descripci√≥n textual: -
	Resultado: -
	Anotaciones: -

9)	Query B/5
	17.6.5 Display a dashboard with the following information: The ratio of orders that have been cancelled during the current month.
	Query: select avg(o.isCanceled) from Order o where o.placementMoment between year(CURRENT_DATE) || '/' || month(CURRENT_DATE) || '/01' and CURRENT_DATE and o.cancelMoment between year(CURRENT_DATE) || '/' || month(CURRENT_DATE) || '/01' and CURRENT_DATE;
	Query 2: select avg(o.isCanceled) from Order o where o.placementMoment >= (year(CURRENT_DATE) || '/' || month(CURRENT_DATE) || '/01') and o.placementMoment <= CURRENT_DATE and o.cancelMoment >= (year(CURRENT_DATE) || '/' || month(CURRENT_DATE) || '/01') and o.cancelMoment <= CURRENT_DATE;
	Query de prueba(Carlos): select avg(o.isCanceled) from Order o where month(o.cancelMoment) = month(CURRENT_DATE) and year(o.cancelMoment) = year(CURRENT_DATE);	
	Query de ayuda: select count(o) from Order o where o.cancelMoment between year(CURRENT_DATE) || '/' || month(CURRENT_DATE) || '/01' and CURRENT_DATE group by o;
	Query de ayuda 2: select count(o) from Order o where o.placementMoment between '2015/11/01' and '2015/11/02' and o.cancelMoment between '2015/11/01' and '2015/11/02' group by o;
	Descripci√≥n textual: -
	Resultado: -
	Anotaciones: Lo que creemos que tiene que hacer es (Canceladas este mes de las placed este mes) / (Placed este mes)

	Creadas y canceladas este mes: month(o.placementMoment) = month(CURRENT_DATE) and year(o.placementMoment) = year(CURRENT_DATE) and month(o.cancelMoment) = month(CURRENT_DATE) and year(o.cancelMoment) = year(CURRENT_DATE)
	Creadas y entregadas este mes: month(o.placementMoment) = month(CURRENT_DATE) and year(o.placementMoment) = year(CURRENT_DATE)
	
10)	Query A/1
	25.2.1 Display a dashboard with the following information: The item/s that has/have more comments.
	Query: select i from Item i where i.deleted is false and i.comments.size = (select max(i.comments.size) from Item i where i.deleted is false) group by i;
	Descripci√≥n textual: Select an item which is not deleted whose Collection<Comment> has a size equals to the biggest size of a Collection<Comment> of an Item which is not deleted too.
	Resultado: -
	Anotaciones: Query acabada y testada.

Dudas (Las dudas resueltas no las borr√©is sin un previo consenso del grupo‚Ä¶ vamos, que no borr√©is a lo loco.):

1)	¬øLos cancelados se consideran placed?
	No me termina de convencer el c.order.size
2)	POR TERMINAR
	¬øHace falta un group by en alguna parte de la query? Quiz√°s para ir agrupando por Order pero no s√©.
	Recordar que hay que tener en cuenta el precio y las unidades pedidas.
	¬øLa suma de oi.price*oi.units a qu√© se iguala, o d√≥nde se va guardando?
	Hay que crear variables derivadas. Quiz√°s un price en Order o un spentMoney en Consumer
3)	POR TERMINAR
	Al igual que en 2), ¬ølos oi.units a qu√© se igualan?
4)	POR TERMINAR
	An√°logo a 3), cuando sepamos hacerlo se resolver√°n juntos.

5)	La parte de c.order.size est√° mal; queremos sacar un n√∫mero de order que cumplen cierta exigencia, no el .size
6)	Mismo caso que 5).
7)	Mismo caso que 5).
8)	Mismo caso que 5).
9)	Preguntar si las fechas se hacen as√≠.

10)	Parece que funciona
